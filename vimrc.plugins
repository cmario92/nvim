" Some plug config ( mainly for YCM)
let g:plug_timeout=300

" Start Plug
call plug#begin('~/.config/nvim/plugged')

" Plugins: Themes ------------------------------------------------------------
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'chriskempson/base16-vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'embark-theme/vim', { 'as': 'embark' }

" Plugins: Airline -----------------------------------------------------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tabs_label = 'NeoVim'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tagbar#flags = 'f'  " show full tag hierarchy
let g:airline#extensions#tabline#show_close_button = 0
set noshowmode

" Plugins: vim-devicons ------------------------------------------------------
Plug 'ryanoasis/vim-devicons'
" loading the plugin
let g:webdevicons_enable = 1
" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1
" adding to vim-airline's tabline
let g:webdevicons_enable_airline_tabline = 1
" adding to vim-airline's statusline
let g:webdevicons_enable_airline_statusline = 1

" Plugins: NerdTree base -----------------------------------------------------
Plug 'scrooloose/nerdtree'

let g:NERDTreeWinSize=45
" Ctrl-P to Display the file browser tree
nmap <C-P> :NERDTreeTabsToggle<CR>
" ,p to show current file in the tree
nmap <leader>p :NERDTreeFind<CR>

" Plugins: NerdTree-git ------------------------------------------------------
Plug 'Xuyuanp/nerdtree-git-plugin'

" Plugins: NerdTree Tabs -----------------------------------------------------
Plug 'jistr/vim-nerdtree-tabs'

" Plugins: nerdcommenter -----------------------------------------------------
Plug 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'

" ,/ to invert comment on the current line/selection
nmap <leader>/ :call NERDComment(0, "invert")<cr>
vmap <leader>/ :call NERDComment(0, "invert")<cr>

" Plugin: ranger.vim francoiscarbrol/ranger.vim -----------------------------
Plug 'francoiscabrol/ranger.vim'
Plug 'rbgrouleff/bclose.vim'

let g:NERDTreeHijackNetrw = 0   " add this line if you use NERDTree
let g:ranger_replace_netrw = 1  " open ranger when vim open a directory

" Plugins: fzf --------------------------------------------------------------
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }

set viminfo='1000
" floating window size ratio
let g:fzf_preview_floating_window_rate = 0.8

" fzf command default options
let g:fzf_preview_default_fzf_options = { '--reverse': v:true, '--preview-window': 'wrap' }

" Add fzf quit mapping
let g:fzf_preview_quit_map = 1

let g:fzf_preview_command = 'bat --color=always --plain {-1}' " Installed bat
" Use vim-devicons
let g:fzf_preview_use_dev_icons = 1

augroup fzf_preview
  autocmd!
  autocmd User fzf_preview#rpc#initialized call s:fzf_preview_settings() " fzf_preview#remote#initialized or fzf_preview#coc#initialized
augroup END

function! s:fzf_preview_settings() abort
  let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
  let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
endfunction

" Plugins: Proc.vim shell scripting and file stuff --------------------------
Plug 'Shougo/vimproc.vim', {'do': 'make'}

" Plugins: Vim Repeat on steroids
Plug 'tpope/vim-repeat'

" Plugins: Floaterm ---------------------------------------------------------
Plug 'voldikss/vim-floaterm'
let g:floaterm_wintype = 'float'

" Set floaterm window's background to black
hi Floaterm guibg=black
" Set floating window border line color to cyan, and background to orange
hi FloatermBorder guibg=black guifg=cyan
hi FloatermNC guibg=gray


if filereadable(expand("~/.config/nvim/plugged/vim-floaterm/plugin/floaterm.vim"))
  " Open Floating Window - Lazygit
  nnoremap <silent> <leader>fl :FloatermNew --autoclose=2 --guibg=black --height=0.99 --width=0.99 --name=Lazygit --wintype=floating lazygit<CR>
  " Open Floating Window - Empty terminal
  nnoremap <leader>ft :FloatermNew --autoclose=2 --height=0.75 --width=0.75 --wintype=float<CR>
  " Open Floating Window - Empty terminal
  nnoremap <leader>fr :FloatermNew --autoclose=2 --height=0.75 --width=0.75 --wintype=float ranger<CR>
endif

" Plugins: FZF file search ---------------------------------------------------
if has('unix')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif
Plug 'junegunn/fzf.vim'

"if executable("ag") && ('' == $FZF_DEFAULT_COMMAND)
"  let $FZF_DEFAULT_COMMAND = "ag --follow --nocolor --nogroup -g ''"
"endif

set rtp+=/usr/local/opt/fzf/

" :Files with preview
" command! FilesP call fzf#vim#files('', fzf#vim#with_preview('right'))
" nmap <leader>, :FilesP<cr>
nmap <leader>, :FzfPreviewProjectFilesRpc<cr>

" nnoremap <silent> <Leader>C :call fzf#run({'source':map(split(globpath(&rtp, "colors/*.vim"), "\n"),"substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),'sink':    'colo','options': '+m','left':30})<CR>
" let g:fzf_colors = {'fg':['fg', 'Normal'],'bg':['bg', 'Normal'],'hl':['fg', 'Comment'],'fg+':['fg', 'CursorLine', 'CursorColumn', 'Normal'],'bg+':['bg', 'CursorLine', 'CursorColumn'],'hl+': ['fg', 'Statement'],'info': ['fg', 'PreProc'],'border': ['fg', 'Ignore'],'prompt':['fg', 'Conditional'],'pointer': ['fg', 'Exception'],'marker':['fg', 'Keyword'],'spinner': ['fg', 'Label'], 'header':['fg', 'Comment'] }

" fuzzy-lines
nmap <leader>l :Lines<cr>

" fuzzy-tags
nmap <leader>t :Tags<cr>
nmap <localleader>t :BTags<cr>

" fuzzy-buffers
" nmap <leader>b :Buffers<cr>
nmap <leader>b :FzfPreviewBuffersRpc<cr>
nmap <leader>G :FzfPreviewGitActionsRpc<cr>
nmap <leader>F :FzfPreviewProjectGrep<space>
nmap <leader>h :FzfPreviewJumpsRpc<cr>
nmap <leader>c :FzfPreviewCommandPaletteRpc<cr>

Plug 'ctrlpvim/ctrlp.vim'
Plug 'd11wtq/ctrlp_bdelete.vim'

let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_max_height = 20
" jump to buffer in the same tab if already open
let g:ctrlp_switch_buffer = 0
" if in git repo - use git file listing command, should be faster
" using this option overrides standard CtrlP ignore list based on vim wildignore
" so use 'grep -v ...' to exclude common image and font files from the search
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --exclude-standard -cod | grep -viE "\.(png|gif|jpg|gz|woff|eot|tiff|ttf|otf)$"']
" open multiple files with <c-z> to mark and <c-o> to open. v - opening in
" vertical splits; j - jump to first open buffer; r - open first in current buffer
let g:ctrlp_open_multiple_files = 'hjr'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'mixed', 'line']
let g:ctrlp_working_path_mode = 'ra'
" prevent CtrlP from adding the default map
" let g:ctrlp_map = '<c-l>'
let g:ctrlp_cmd = 'CtrlP'
map <c-l> :CtrlP <CR>

" Plugins: Greplace files ----------------------------------------------------
" Plug 'vim-scripts/greplace.vim'
" nmap <leader>Gs :Gsearch<cr>
" nmap <leader>GS :Gbuffersearch<cr>
" nmap <leader>Gr :Greplace<cr>

" replace or edit multiple files at once, then use :Greplace to incorporate
" the changes, followed by :wall to save all modified buffers

" if executable("ag")
" set grepprg=ag
" let g:grep_cmd_opts = '--line-numbers --noheading'
" endif

" Plugins: Gundo -------------------------------------------------------------
Plug 'sjl/gundo.vim'

let g:gundo_close_on_revert = 1

nmap <leader>u :GundoToggle<CR>

" Plugins: Vim misc and vim sessions -----------------------------------------
" vim-misc rate-limits, warns and does other misc tasks
Plug 'xolox/vim-misc'
" Vim-session allows to save sessions to later continue with them
Plug 'xolox/vim-session'

let g:session_autosave = 'no'
let g:session_autoload = 'no'

nmap <leader>SS :SaveSession
nmap <leader>SO :OpenSession
if has('gui_running')
nmap <leader>SR :RestartVim<CR>
endif

" Plugins: Vim Switch --------------------------------------------------------
Plug 'AndrewRadev/switch.vim'

" Plugins: Urls to links -----------------------------------------------------
Plug 'vim-scripts/utl.vim'

" config help: <url:~/.config/nvim/plugged/utl_rc.vim#r=utl_cfg_hdl_scm_http>
if has("mac")
let g:utl_cfg_hdl_scm_http_system = "!open '%u'"
end

nmap <leader>o :Utl <space>

" Plugins: Xterm color table -------------------------------------------------
Plug 'guns/xterm-color-table.vim'

" Plugins: yankring ----------------------------------------------------------
Plug 'vim-scripts/YankRing.vim'

let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'
" put the yankring_history file in ~/.backup
let g:yankring_history_dir = expand('~/.backup')
let g:yankring_max_history = 1000
" ,y to show the yankring
nmap <leader>y :YRShow<cr>
let g:yankring_window_height = 20

" Plugins: Delimate & Endwise closing things automatically -------------------
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-endwise'

" Turns on/off the expansion of <Space>
let g:delimitMate_expand_space = 1
" Turns on/off the expansion of <CR>
let g:delimitMate_expand_cr = 1

" Plugins: Editorconfig for those .editorconfig files ------------------------
Plug 'editorconfig/editorconfig-vim'

" Plugins: Git things done ---------------------------------------------------
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Merginal'

" ,g for Ggrep
nmap <leader>g :silent Ggrep<space>

" ,f for global git serach for word under the cursor (with highlight)
nmap <leader>f :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>

" same in visual mode
vmap <leader>f y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

Plug 'airblade/vim-gitgutter'
Plug 'vitaly/vim-gitignore'

" Plugins: Vim surround turning quotes into other things ---------------------
Plug 'tpope/vim-surround'

" Plugins: Tmux navigator ----------------------------------------------------
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <c-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <c-w>l :TmuxNavigateRight<cr>
nnoremap <silent> <c-w>h :TmuxNavigateLeft<cr>

" Plugins: languages and syntax ----------------------------------------------
" General languages
Plug 'ekalinin/Dockerfile.vim'
Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 1
Plug 'tpope/vim-markdown'
Plug 'irrationalistic/vim-tasks'
Plug 'tsaleh/vim-tmux'
Plug 'leafgarland/typescript-vim'
" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mmalecki/vim-node.js'

" Plugins: Emmet -------------------------------------------------------------
Plug 'mattn/emmet-vim'

" Plugins: Testing -----------------------------------------------------------
Plug 'janko-m/vim-test'

let test#strategy = "vim"
nmap <leader>t :TestNearest --format documentation<cr>
nmap <leader>T :TestFile --format documentation<cr>

" Plugins: Code Completion and lint help -------------------------------------
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

let g:coc_global_extensions = [
\ 'coc-json', 'coc-pairs', 'coc-eslint',  'coc-tsserver',
\ 'coc-html', 'coc-css', 'coc-solargraph', 'coc-yaml', 'coc-emmet',
\ 'coc-lists', 'coc-snippets', 'coc-git', 'coc-marketplace',
\ 'coc-webpack', 'coc-vimlsp', 'coc-docker']

let g:coc_user_config = {
\ "diagnostic.errorSign": '⚠',
\ "diagnostic.warningSign": '⚐',
\ "diagnostic.infoSign": '⚐',
\ "diagnostic.hintSign": '⚐',
\ "diagnostic.signOffset": 100,
\ "coc.preferences.enableFloatHighlight": v:false,
\ }

let g:airline#extensions#coc#enabled = 1
let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)] }'
let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]} '
" highlight clear CocErrorSign
" highlight clear CocWarningSign
" hi link CocErrorSign GitGutterDelete
" hi link CocWarningSign  WarningMsg

" if hidden is not set, TextEdit might fail.
" set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" don't give |ins-completion-menu| messages.
set shortmess+=c

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
if (index(['vim','help'], &filetype) >= 0)
  execute 'h '.expand('<cword>')
else
  call CocAction('doHover')
endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Jumpers - I'll remove some of those sometime
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Next and previous navigation
nmap <silent><leader>m  <Plug>(coc-diagnostic-next)
nmap <silent><leader>M  <Plug>(coc-diagnostic-prev)

" Plugins: Ale linter --------------------------------------------------------
Plug 'w0rp/ale'

" Remaps
nmap <silent> <C-n> <Plug>(ale_previous_wrap)
nmap <silent> <C-N> <Plug>(ale_next_wrap)
" Icons
let g:ale_sign_error = '⚠'
let g:ale_sign_warning = '⚐'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
hi link ALEErrorSign    GitGutterDelete
hi link ALEWarningSign  Todo

" Dissabled linters (since COC takes care of these)
let g:ale_linters = {
\  'css':        [],
\  'javascript': [],
\  'typescript': [],
\  'json':       [],
\  'scss':       [],
\  'yaml':       []
\ }

" Autofixing
let g:ale_fixers = {
\ '*': ['trim_whitespace', 'remove_trailing_lines'],
\ 'javascript': ['eslint'],
\ 'typescript': ['eslint', 'tslint'],
\ 'markdown': ['prettier'],
\ 'scss': ['stylelint'],
\ }

let g:ale_fix_on_save = 1 " ALE Fixers - Fix on Save

" Airline integration
let g:airline#extensions#ale#enabled = 1
let g:ale_statusline_format = ['⚠ %d', '⚠ %d', '']
let g:ale_echo_msg_error_str = '⚠'
let g:ale_echo_msg_warning_str = '⚐'

" Plugin: Vista liuchengxu/vista.vim
Plug 'liuchengxu/vista.vim'


function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

set statusline+=%{NearestMethodOrFunction()}

" By default vista.vim never run if you don't call it explicitly.
"
" If you want to show the nearest function in your statusline automatically,
" you can add the following line to your vimrc
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

" End Plug
call plug#end()
" Automatically executes 'filetype plugin indent on' and 'syntax enable'
